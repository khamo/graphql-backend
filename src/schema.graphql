type Query {
  groups: [Group!]
  searchGroups(searchQuery: String!): [Group!]
  group(id: ID!): Group
  threads(groupId: ID!): [Thread!]
  posts(threadId: ID!): [Post!]!
  wikiPages(groupId: ID!): [WikiPage!]
  me: Person
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  updatePerson(email: String, password: String, name: String): Person!

  createGroup(name: String!, description: String): Group!
  joinGroup(groupId: ID!): Group!
  leaveGroup(groupId: ID!): DeletionResponse!

  createThread(groupId: ID!, title: String!, content: String!): Thread!
  editThread(threadId: ID!, title: String): Thread!
  deleteThread(threadId: ID!): DeletionResponse!

  createPost(threadId: ID!, content: String!): Post!
  editPost(postId: ID!, content: String!): Post!
  deletePost(postId: ID!): DeletionResponse!

  createWikiPage(groupId: ID!, title: String!, content: String!): WikiPage!
  editWikiPage(pageId: ID!, title: String!, content: String!): WikiPage!
  deleteWikiPage(pageId: ID!): DeletionResponse!
}

type Person {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  groups: [Group!]
}

type Group {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String
  members: [Person!]
  threads: [Thread!]
  memberCount: Int!
}

type Thread {
  id: ID!
  createdAt: DateTime!
  title: String!
  posts(first: Int, last: Int): [Post!]!
  group: Group!
}

type Post {
  id: ID!
  createdAt: DateTime!
  author: Person!
  content: String!
  thread: Thread!
}

type WikiPage {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  content: String!
}

type DeletionResponse {
  id: ID!
  success: Boolean!
  message: String
}

type AuthPayload {
  token: String!
  person: Person!
}

scalar DateTime
