// Code generated by Prisma (prisma@1.26.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  group: (where?: GroupWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  thread: (where?: ThreadWhereInput) => Promise<boolean>;
  wikiPage: (where?: WikiPageWhereInput) => Promise<boolean>;
  wikiPageContent: (where?: WikiPageContentWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonPromise;
  persons: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Person>;
  personsConnection: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  thread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  threads: (args?: {
    where?: ThreadWhereInput;
    orderBy?: ThreadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Thread>;
  threadsConnection: (args?: {
    where?: ThreadWhereInput;
    orderBy?: ThreadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ThreadConnectionPromise;
  wikiPage: (where: WikiPageWhereUniqueInput) => WikiPagePromise;
  wikiPages: (args?: {
    where?: WikiPageWhereInput;
    orderBy?: WikiPageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WikiPage>;
  wikiPagesConnection: (args?: {
    where?: WikiPageWhereInput;
    orderBy?: WikiPageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WikiPageConnectionPromise;
  wikiPageContent: (
    where: WikiPageContentWhereUniqueInput
  ) => WikiPageContentPromise;
  wikiPageContents: (args?: {
    where?: WikiPageContentWhereInput;
    orderBy?: WikiPageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WikiPageContent>;
  wikiPageContentsConnection: (args?: {
    where?: WikiPageContentWhereInput;
    orderBy?: WikiPageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WikiPageContentConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (args: {
    data: PersonUpdateInput;
    where: PersonWhereUniqueInput;
  }) => PersonPromise;
  updateManyPersons: (args: {
    data: PersonUpdateManyMutationInput;
    where?: PersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPerson: (args: {
    where: PersonWhereUniqueInput;
    create: PersonCreateInput;
    update: PersonUpdateInput;
  }) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createThread: (data: ThreadCreateInput) => ThreadPromise;
  updateThread: (args: {
    data: ThreadUpdateInput;
    where: ThreadWhereUniqueInput;
  }) => ThreadPromise;
  updateManyThreads: (args: {
    data: ThreadUpdateManyMutationInput;
    where?: ThreadWhereInput;
  }) => BatchPayloadPromise;
  upsertThread: (args: {
    where: ThreadWhereUniqueInput;
    create: ThreadCreateInput;
    update: ThreadUpdateInput;
  }) => ThreadPromise;
  deleteThread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  deleteManyThreads: (where?: ThreadWhereInput) => BatchPayloadPromise;
  createWikiPage: (data: WikiPageCreateInput) => WikiPagePromise;
  updateWikiPage: (args: {
    data: WikiPageUpdateInput;
    where: WikiPageWhereUniqueInput;
  }) => WikiPagePromise;
  upsertWikiPage: (args: {
    where: WikiPageWhereUniqueInput;
    create: WikiPageCreateInput;
    update: WikiPageUpdateInput;
  }) => WikiPagePromise;
  deleteWikiPage: (where: WikiPageWhereUniqueInput) => WikiPagePromise;
  deleteManyWikiPages: (where?: WikiPageWhereInput) => BatchPayloadPromise;
  createWikiPageContent: (
    data: WikiPageContentCreateInput
  ) => WikiPageContentPromise;
  updateWikiPageContent: (args: {
    data: WikiPageContentUpdateInput;
    where: WikiPageContentWhereUniqueInput;
  }) => WikiPageContentPromise;
  updateManyWikiPageContents: (args: {
    data: WikiPageContentUpdateManyMutationInput;
    where?: WikiPageContentWhereInput;
  }) => BatchPayloadPromise;
  upsertWikiPageContent: (args: {
    where: WikiPageContentWhereUniqueInput;
    create: WikiPageContentCreateInput;
    update: WikiPageContentUpdateInput;
  }) => WikiPageContentPromise;
  deleteWikiPageContent: (
    where: WikiPageContentWhereUniqueInput
  ) => WikiPageContentPromise;
  deleteManyWikiPageContents: (
    where?: WikiPageContentWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput
  ) => PersonSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  thread: (
    where?: ThreadSubscriptionWhereInput
  ) => ThreadSubscriptionPayloadSubscription;
  wikiPage: (
    where?: WikiPageSubscriptionWhereInput
  ) => WikiPageSubscriptionPayloadSubscription;
  wikiPageContent: (
    where?: WikiPageContentSubscriptionWhereInput
  ) => WikiPageContentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PersonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ThreadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "content_ASC"
  | "content_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WikiPageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WikiPageContentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutMembersDataInput;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface WikiPageContentUpdateManyWithoutPageInput {
  create?:
    | WikiPageContentCreateWithoutPageInput[]
    | WikiPageContentCreateWithoutPageInput;
  delete?: WikiPageContentWhereUniqueInput[] | WikiPageContentWhereUniqueInput;
  connect?: WikiPageContentWhereUniqueInput[] | WikiPageContentWhereUniqueInput;
  set?: WikiPageContentWhereUniqueInput[] | WikiPageContentWhereUniqueInput;
  disconnect?:
    | WikiPageContentWhereUniqueInput[]
    | WikiPageContentWhereUniqueInput;
  update?:
    | WikiPageContentUpdateWithWhereUniqueWithoutPageInput[]
    | WikiPageContentUpdateWithWhereUniqueWithoutPageInput;
  upsert?:
    | WikiPageContentUpsertWithWhereUniqueWithoutPageInput[]
    | WikiPageContentUpsertWithWhereUniqueWithoutPageInput;
  deleteMany?:
    | WikiPageContentScalarWhereInput[]
    | WikiPageContentScalarWhereInput;
  updateMany?:
    | WikiPageContentUpdateManyWithWhereNestedInput[]
    | WikiPageContentUpdateManyWithWhereNestedInput;
}

export interface WikiPageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  content_every?: WikiPageContentWhereInput;
  content_some?: WikiPageContentWhereInput;
  content_none?: WikiPageContentWhereInput;
  group?: GroupWhereInput;
  AND?: WikiPageWhereInput[] | WikiPageWhereInput;
  OR?: WikiPageWhereInput[] | WikiPageWhereInput;
  NOT?: WikiPageWhereInput[] | WikiPageWhereInput;
}

export interface PersonUpdateWithWhereUniqueWithoutGroupsInput {
  where: PersonWhereUniqueInput;
  data: PersonUpdateWithoutGroupsDataInput;
}

export interface ThreadUpdateOneRequiredWithoutPostsInput {
  create?: ThreadCreateWithoutPostsInput;
  update?: ThreadUpdateWithoutPostsDataInput;
  upsert?: ThreadUpsertWithoutPostsInput;
  connect?: ThreadWhereUniqueInput;
}

export interface PersonUpdateWithoutGroupsDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface WikiPageContentUpdateWithWhereUniqueWithoutPageInput {
  where: WikiPageContentWhereUniqueInput;
  data: WikiPageContentUpdateWithoutPageDataInput;
}

export interface PersonUpsertWithWhereUniqueWithoutGroupsInput {
  where: PersonWhereUniqueInput;
  update: PersonUpdateWithoutGroupsDataInput;
  create: PersonCreateWithoutGroupsInput;
}

export interface WikiPageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WikiPageWhereInput;
  AND?: WikiPageSubscriptionWhereInput[] | WikiPageSubscriptionWhereInput;
  OR?: WikiPageSubscriptionWhereInput[] | WikiPageSubscriptionWhereInput;
  NOT?: WikiPageSubscriptionWhereInput[] | WikiPageSubscriptionWhereInput;
}

export interface PersonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  OR?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  NOT?: PersonScalarWhereInput[] | PersonScalarWhereInput;
}

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  members_every?: PersonWhereInput;
  members_some?: PersonWhereInput;
  members_none?: PersonWhereInput;
  threads_every?: ThreadWhereInput;
  threads_some?: ThreadWhereInput;
  threads_none?: ThreadWhereInput;
  wikiPages_every?: WikiPageWhereInput;
  wikiPages_some?: WikiPageWhereInput;
  wikiPages_none?: WikiPageWhereInput;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface PersonUpdateManyWithWhereNestedInput {
  where: PersonScalarWhereInput;
  data: PersonUpdateManyDataInput;
}

export interface PersonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  groups_every?: GroupWhereInput;
  groups_some?: GroupWhereInput;
  groups_none?: GroupWhereInput;
  AND?: PersonWhereInput[] | PersonWhereInput;
  OR?: PersonWhereInput[] | PersonWhereInput;
  NOT?: PersonWhereInput[] | PersonWhereInput;
}

export interface PersonUpdateManyDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonWhereInput;
  AND?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  OR?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  NOT?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
}

export interface ThreadUpdateManyWithoutGroupInput {
  create?: ThreadCreateWithoutGroupInput[] | ThreadCreateWithoutGroupInput;
  delete?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  connect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  set?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  disconnect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  update?:
    | ThreadUpdateWithWhereUniqueWithoutGroupInput[]
    | ThreadUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | ThreadUpsertWithWhereUniqueWithoutGroupInput[]
    | ThreadUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  updateMany?:
    | ThreadUpdateManyWithWhereNestedInput[]
    | ThreadUpdateManyWithWhereNestedInput;
}

export interface WikiPageContentUpdateManyMutationInput {
  title?: String;
  content?: String;
  deleted?: Boolean;
}

export interface ThreadUpdateWithWhereUniqueWithoutGroupInput {
  where: ThreadWhereUniqueInput;
  data: ThreadUpdateWithoutGroupDataInput;
}

export interface WikiPageUpdateWithoutContentDataInput {
  group?: GroupUpdateOneRequiredWithoutWikiPagesInput;
}

export interface ThreadUpdateWithoutGroupDataInput {
  title?: String;
  posts?: PostUpdateManyWithoutThreadInput;
}

export interface WikiPageContentUpdateInput {
  page?: WikiPageUpdateOneRequiredWithoutContentInput;
  title?: String;
  content?: String;
  author?: PersonUpdateOneRequiredInput;
  deleted?: Boolean;
}

export interface PostUpdateManyWithoutThreadInput {
  create?: PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutThreadInput[]
    | PostUpdateWithWhereUniqueWithoutThreadInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutThreadInput[]
    | PostUpsertWithWhereUniqueWithoutThreadInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PostUpdateWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutThreadDataInput;
}

export interface WikiPageContentCreateInput {
  page: WikiPageCreateOneWithoutContentInput;
  title: String;
  content: String;
  author: PersonCreateOneInput;
  deleted: Boolean;
}

export interface PostUpdateWithoutThreadDataInput {
  author?: PersonUpdateOneRequiredInput;
  content?: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonUpdateOneRequiredInput {
  create?: PersonCreateInput;
  update?: PersonUpdateDataInput;
  upsert?: PersonUpsertNestedInput;
  connect?: PersonWhereUniqueInput;
}

export interface GroupUpdateOneRequiredWithoutWikiPagesInput {
  create?: GroupCreateWithoutWikiPagesInput;
  update?: GroupUpdateWithoutWikiPagesDataInput;
  upsert?: GroupUpsertWithoutWikiPagesInput;
  connect?: GroupWhereUniqueInput;
}

export interface PersonUpdateDataInput {
  email?: String;
  password?: String;
  name?: String;
  groups?: GroupUpdateManyWithoutMembersInput;
}

export type ThreadWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GroupUpdateManyWithoutMembersInput {
  create?: GroupCreateWithoutMembersInput[] | GroupCreateWithoutMembersInput;
  delete?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  set?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  disconnect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  update?:
    | GroupUpdateWithWhereUniqueWithoutMembersInput[]
    | GroupUpdateWithWhereUniqueWithoutMembersInput;
  upsert?:
    | GroupUpsertWithWhereUniqueWithoutMembersInput[]
    | GroupUpsertWithWhereUniqueWithoutMembersInput;
  deleteMany?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  updateMany?:
    | GroupUpdateManyWithWhereNestedInput[]
    | GroupUpdateManyWithWhereNestedInput;
}

export interface GroupCreateOneWithoutWikiPagesInput {
  create?: GroupCreateWithoutWikiPagesInput;
  connect?: GroupWhereUniqueInput;
}

export interface GroupUpdateWithoutThreadsDataInput {
  name?: String;
  description?: String;
  members?: PersonUpdateManyWithoutGroupsInput;
  wikiPages?: WikiPageUpdateManyWithoutGroupInput;
}

export type WikiPageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface GroupUpdateWithoutMembersDataInput {
  name?: String;
  description?: String;
  threads?: ThreadUpdateManyWithoutGroupInput;
  wikiPages?: WikiPageUpdateManyWithoutGroupInput;
}

export interface ThreadUpdateInput {
  title?: String;
  posts?: PostUpdateManyWithoutThreadInput;
  group?: GroupUpdateOneRequiredWithoutThreadsInput;
}

export interface WikiPageUpdateManyWithoutGroupInput {
  create?: WikiPageCreateWithoutGroupInput[] | WikiPageCreateWithoutGroupInput;
  delete?: WikiPageWhereUniqueInput[] | WikiPageWhereUniqueInput;
  connect?: WikiPageWhereUniqueInput[] | WikiPageWhereUniqueInput;
  set?: WikiPageWhereUniqueInput[] | WikiPageWhereUniqueInput;
  disconnect?: WikiPageWhereUniqueInput[] | WikiPageWhereUniqueInput;
  update?:
    | WikiPageUpdateWithWhereUniqueWithoutGroupInput[]
    | WikiPageUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | WikiPageUpsertWithWhereUniqueWithoutGroupInput[]
    | WikiPageUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: WikiPageScalarWhereInput[] | WikiPageScalarWhereInput;
}

export type WikiPageContentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface WikiPageUpdateWithWhereUniqueWithoutGroupInput {
  where: WikiPageWhereUniqueInput;
  data: WikiPageUpdateWithoutGroupDataInput;
}

export interface ThreadUpsertWithoutPostsInput {
  update: ThreadUpdateWithoutPostsDataInput;
  create: ThreadCreateWithoutPostsInput;
}

export interface WikiPageUpdateWithoutGroupDataInput {
  content?: WikiPageContentUpdateManyWithoutPageInput;
}

export interface PersonCreateManyWithoutGroupsInput {
  create?: PersonCreateWithoutGroupsInput[] | PersonCreateWithoutGroupsInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
}

export interface WikiPageContentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  page?: WikiPageWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: PersonWhereInput;
  deleted?: Boolean;
  deleted_not?: Boolean;
  AND?: WikiPageContentWhereInput[] | WikiPageContentWhereInput;
  OR?: WikiPageContentWhereInput[] | WikiPageContentWhereInput;
  NOT?: WikiPageContentWhereInput[] | WikiPageContentWhereInput;
}

export interface ThreadCreateManyWithoutGroupInput {
  create?: ThreadCreateWithoutGroupInput[] | ThreadCreateWithoutGroupInput;
  connect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  author?: PersonWhereInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  thread?: ThreadWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PostCreateManyWithoutThreadInput {
  create?: PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface WikiPageContentUpdateWithoutPageDataInput {
  title?: String;
  content?: String;
  author?: PersonUpdateOneRequiredInput;
  deleted?: Boolean;
}

export interface PersonCreateOneInput {
  create?: PersonCreateInput;
  connect?: PersonWhereUniqueInput;
}

export interface WikiPageContentUpsertWithWhereUniqueWithoutPageInput {
  where: WikiPageContentWhereUniqueInput;
  update: WikiPageContentUpdateWithoutPageDataInput;
  create: WikiPageContentCreateWithoutPageInput;
}

export interface GroupCreateManyWithoutMembersInput {
  create?: GroupCreateWithoutMembersInput[] | GroupCreateWithoutMembersInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
}

export interface WikiPageContentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  deleted?: Boolean;
  deleted_not?: Boolean;
  AND?: WikiPageContentScalarWhereInput[] | WikiPageContentScalarWhereInput;
  OR?: WikiPageContentScalarWhereInput[] | WikiPageContentScalarWhereInput;
  NOT?: WikiPageContentScalarWhereInput[] | WikiPageContentScalarWhereInput;
}

export interface WikiPageCreateManyWithoutGroupInput {
  create?: WikiPageCreateWithoutGroupInput[] | WikiPageCreateWithoutGroupInput;
  connect?: WikiPageWhereUniqueInput[] | WikiPageWhereUniqueInput;
}

export interface WikiPageContentUpdateManyWithWhereNestedInput {
  where: WikiPageContentScalarWhereInput;
  data: WikiPageContentUpdateManyDataInput;
}

export interface WikiPageContentCreateManyWithoutPageInput {
  create?:
    | WikiPageContentCreateWithoutPageInput[]
    | WikiPageContentCreateWithoutPageInput;
  connect?: WikiPageContentWhereUniqueInput[] | WikiPageContentWhereUniqueInput;
}

export interface WikiPageContentUpdateManyDataInput {
  title?: String;
  content?: String;
  deleted?: Boolean;
}

export interface GroupUpdateInput {
  name?: String;
  description?: String;
  members?: PersonUpdateManyWithoutGroupsInput;
  threads?: ThreadUpdateManyWithoutGroupInput;
  wikiPages?: WikiPageUpdateManyWithoutGroupInput;
}

export interface WikiPageUpsertWithWhereUniqueWithoutGroupInput {
  where: WikiPageWhereUniqueInput;
  update: WikiPageUpdateWithoutGroupDataInput;
  create: WikiPageCreateWithoutGroupInput;
}

export interface WikiPageContentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WikiPageContentWhereInput;
  AND?:
    | WikiPageContentSubscriptionWhereInput[]
    | WikiPageContentSubscriptionWhereInput;
  OR?:
    | WikiPageContentSubscriptionWhereInput[]
    | WikiPageContentSubscriptionWhereInput;
  NOT?:
    | WikiPageContentSubscriptionWhereInput[]
    | WikiPageContentSubscriptionWhereInput;
}

export interface WikiPageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: WikiPageScalarWhereInput[] | WikiPageScalarWhereInput;
  OR?: WikiPageScalarWhereInput[] | WikiPageScalarWhereInput;
  NOT?: WikiPageScalarWhereInput[] | WikiPageScalarWhereInput;
}

export interface ThreadSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ThreadWhereInput;
  AND?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
  OR?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
  NOT?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
}

export interface GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface GroupScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  OR?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  NOT?: GroupScalarWhereInput[] | GroupScalarWhereInput;
}

export interface WikiPageUpdateOneRequiredWithoutContentInput {
  create?: WikiPageCreateWithoutContentInput;
  update?: WikiPageUpdateWithoutContentDataInput;
  upsert?: WikiPageUpsertWithoutContentInput;
  connect?: WikiPageWhereUniqueInput;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface WikiPageCreateOneWithoutContentInput {
  create?: WikiPageCreateWithoutContentInput;
  connect?: WikiPageWhereUniqueInput;
}

export interface GroupUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface GroupUpdateWithoutWikiPagesDataInput {
  name?: String;
  description?: String;
  members?: PersonUpdateManyWithoutGroupsInput;
  threads?: ThreadUpdateManyWithoutGroupInput;
}

export interface PersonUpsertNestedInput {
  update: PersonUpdateDataInput;
  create: PersonCreateInput;
}

export interface GroupCreateWithoutWikiPagesInput {
  name: String;
  description?: String;
  members?: PersonCreateManyWithoutGroupsInput;
  threads?: ThreadCreateManyWithoutGroupInput;
}

export interface PostUpsertWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutThreadDataInput;
  create: PostCreateWithoutThreadInput;
}

export interface ThreadUpdateManyMutationInput {
  title?: String;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyMutationInput {
  content?: String;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface GroupCreateInput {
  name: String;
  description?: String;
  members?: PersonCreateManyWithoutGroupsInput;
  threads?: ThreadCreateManyWithoutGroupInput;
  wikiPages?: WikiPageCreateManyWithoutGroupInput;
}

export interface PostUpdateManyDataInput {
  content?: String;
}

export interface ThreadCreateWithoutGroupInput {
  title: String;
  posts?: PostCreateManyWithoutThreadInput;
}

export interface ThreadUpsertWithWhereUniqueWithoutGroupInput {
  where: ThreadWhereUniqueInput;
  update: ThreadUpdateWithoutGroupDataInput;
  create: ThreadCreateWithoutGroupInput;
}

export interface PersonCreateInput {
  email: String;
  password: String;
  name: String;
  groups?: GroupCreateManyWithoutMembersInput;
}

export interface ThreadScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  OR?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  NOT?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
}

export interface WikiPageCreateWithoutGroupInput {
  content?: WikiPageContentCreateManyWithoutPageInput;
}

export interface ThreadUpdateManyWithWhereNestedInput {
  where: ThreadScalarWhereInput;
  data: ThreadUpdateManyDataInput;
}

export interface PersonUpdateManyWithoutGroupsInput {
  create?: PersonCreateWithoutGroupsInput[] | PersonCreateWithoutGroupsInput;
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  set?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput;
  update?:
    | PersonUpdateWithWhereUniqueWithoutGroupsInput[]
    | PersonUpdateWithWhereUniqueWithoutGroupsInput;
  upsert?:
    | PersonUpsertWithWhereUniqueWithoutGroupsInput[]
    | PersonUpsertWithWhereUniqueWithoutGroupsInput;
  deleteMany?: PersonScalarWhereInput[] | PersonScalarWhereInput;
  updateMany?:
    | PersonUpdateManyWithWhereNestedInput[]
    | PersonUpdateManyWithWhereNestedInput;
}

export interface ThreadUpdateManyDataInput {
  title?: String;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface GroupUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface WikiPageCreateWithoutContentInput {
  group: GroupCreateOneWithoutWikiPagesInput;
}

export interface GroupUpdateOneRequiredWithoutThreadsInput {
  create?: GroupCreateWithoutThreadsInput;
  update?: GroupUpdateWithoutThreadsDataInput;
  upsert?: GroupUpsertWithoutThreadsInput;
  connect?: GroupWhereUniqueInput;
}

export interface WikiPageUpdateInput {
  content?: WikiPageContentUpdateManyWithoutPageInput;
  group?: GroupUpdateOneRequiredWithoutWikiPagesInput;
}

export interface ThreadUpdateWithoutPostsDataInput {
  title?: String;
  group?: GroupUpdateOneRequiredWithoutThreadsInput;
}

export interface ThreadCreateInput {
  title: String;
  posts?: PostCreateManyWithoutThreadInput;
  group: GroupCreateOneWithoutThreadsInput;
}

export interface PersonUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  groups?: GroupUpdateManyWithoutMembersInput;
}

export interface PersonCreateWithoutGroupsInput {
  email: String;
  password: String;
  name: String;
}

export interface PersonUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface GroupCreateWithoutMembersInput {
  name: String;
  description?: String;
  threads?: ThreadCreateManyWithoutGroupInput;
  wikiPages?: WikiPageCreateManyWithoutGroupInput;
}

export interface PostCreateInput {
  author: PersonCreateOneInput;
  content: String;
  thread: ThreadCreateOneWithoutPostsInput;
}

export interface ThreadWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  group?: GroupWhereInput;
  AND?: ThreadWhereInput[] | ThreadWhereInput;
  OR?: ThreadWhereInput[] | ThreadWhereInput;
  NOT?: ThreadWhereInput[] | ThreadWhereInput;
}

export interface ThreadCreateOneWithoutPostsInput {
  create?: ThreadCreateWithoutPostsInput;
  connect?: ThreadWhereUniqueInput;
}

export interface GroupUpsertWithoutWikiPagesInput {
  update: GroupUpdateWithoutWikiPagesDataInput;
  create: GroupCreateWithoutWikiPagesInput;
}

export interface PostUpdateInput {
  author?: PersonUpdateOneRequiredInput;
  content?: String;
  thread?: ThreadUpdateOneRequiredWithoutPostsInput;
}

export interface GroupCreateWithoutThreadsInput {
  name: String;
  description?: String;
  members?: PersonCreateManyWithoutGroupsInput;
  wikiPages?: WikiPageCreateManyWithoutGroupInput;
}

export interface GroupCreateOneWithoutThreadsInput {
  create?: GroupCreateWithoutThreadsInput;
  connect?: GroupWhereUniqueInput;
}

export interface ThreadCreateWithoutPostsInput {
  title: String;
  group: GroupCreateOneWithoutThreadsInput;
}

export interface WikiPageCreateInput {
  content?: WikiPageContentCreateManyWithoutPageInput;
  group: GroupCreateOneWithoutWikiPagesInput;
}

export interface WikiPageUpsertWithoutContentInput {
  update: WikiPageUpdateWithoutContentDataInput;
  create: WikiPageCreateWithoutContentInput;
}

export interface WikiPageContentCreateWithoutPageInput {
  title: String;
  content: String;
  author: PersonCreateOneInput;
  deleted: Boolean;
}

export interface PostCreateWithoutThreadInput {
  author: PersonCreateOneInput;
  content: String;
}

export interface GroupUpsertWithoutThreadsInput {
  update: GroupUpdateWithoutThreadsDataInput;
  create: GroupCreateWithoutThreadsInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WikiPageContentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  content: String;
  deleted: Boolean;
}

export interface WikiPageContentPreviousValuesPromise
  extends Promise<WikiPageContentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  deleted: () => Promise<Boolean>;
}

export interface WikiPageContentPreviousValuesSubscription
  extends Promise<AsyncIterator<WikiPageContentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Person {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  password: String;
  name: String;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateWikiPageContent {
  count: Int;
}

export interface AggregateWikiPageContentPromise
  extends Promise<AggregateWikiPageContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWikiPageContentSubscription
  extends Promise<AsyncIterator<AggregateWikiPageContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WikiPageContent {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  content: String;
  deleted: Boolean;
}

export interface WikiPageContentPromise
  extends Promise<WikiPageContent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  page: <T = WikiPagePromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = PersonPromise>() => T;
  deleted: () => Promise<Boolean>;
}

export interface WikiPageContentSubscription
  extends Promise<AsyncIterator<WikiPageContent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  page: <T = WikiPageSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = PersonSubscription>() => T;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface WikiPageContentConnection {
  pageInfo: PageInfo;
  edges: WikiPageContentEdge[];
}

export interface WikiPageContentConnectionPromise
  extends Promise<WikiPageContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WikiPageContentEdge>>() => T;
  aggregate: <T = AggregateWikiPageContentPromise>() => T;
}

export interface WikiPageContentConnectionSubscription
  extends Promise<AsyncIterator<WikiPageContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WikiPageContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWikiPageContentSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  description?: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  members: <T = FragmentableArray<Person>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  threads: <T = FragmentableArray<Thread>>(args?: {
    where?: ThreadWhereInput;
    orderBy?: ThreadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wikiPages: <T = FragmentableArray<WikiPage>>(args?: {
    where?: WikiPageWhereInput;
    orderBy?: WikiPageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  members: <T = Promise<AsyncIterator<PersonSubscription>>>(args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  threads: <T = Promise<AsyncIterator<ThreadSubscription>>>(args?: {
    where?: ThreadWhereInput;
    orderBy?: ThreadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  wikiPages: <T = Promise<AsyncIterator<WikiPageSubscription>>>(args?: {
    where?: WikiPageWhereInput;
    orderBy?: WikiPageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WikiPageEdge {
  node: WikiPage;
  cursor: String;
}

export interface WikiPageEdgePromise
  extends Promise<WikiPageEdge>,
    Fragmentable {
  node: <T = WikiPagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WikiPageEdgeSubscription
  extends Promise<AsyncIterator<WikiPageEdge>>,
    Fragmentable {
  node: <T = WikiPageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WikiPage {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface WikiPagePromise extends Promise<WikiPage>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  content: <T = FragmentableArray<WikiPageContent>>(args?: {
    where?: WikiPageContentWhereInput;
    orderBy?: WikiPageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface WikiPageSubscription
  extends Promise<AsyncIterator<WikiPage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: <T = Promise<AsyncIterator<WikiPageContentSubscription>>>(args?: {
    where?: WikiPageContentWhereInput;
    orderBy?: WikiPageContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupSubscription>() => T;
}

export interface AggregateThread {
  count: Int;
}

export interface AggregateThreadPromise
  extends Promise<AggregateThread>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThreadSubscription
  extends Promise<AsyncIterator<AggregateThread>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WikiPagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface WikiPagePreviousValuesPromise
  extends Promise<WikiPagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface WikiPagePreviousValuesSubscription
  extends Promise<AsyncIterator<WikiPagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ThreadConnection {
  pageInfo: PageInfo;
  edges: ThreadEdge[];
}

export interface ThreadConnectionPromise
  extends Promise<ThreadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThreadEdge>>() => T;
  aggregate: <T = AggregateThreadPromise>() => T;
}

export interface ThreadConnectionSubscription
  extends Promise<AsyncIterator<ThreadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThreadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThreadSubscription>() => T;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  description?: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WikiPageSubscriptionPayload {
  mutation: MutationType;
  node: WikiPage;
  updatedFields: String[];
  previousValues: WikiPagePreviousValues;
}

export interface WikiPageSubscriptionPayloadPromise
  extends Promise<WikiPageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WikiPagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WikiPagePreviousValuesPromise>() => T;
}

export interface WikiPageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WikiPageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WikiPageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WikiPagePreviousValuesSubscription>() => T;
}

export interface PersonConnection {
  pageInfo: PageInfo;
  edges: PersonEdge[];
}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  node: Person;
  updatedFields: String[];
  previousValues: PersonPreviousValues;
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface WikiPageContentSubscriptionPayload {
  mutation: MutationType;
  node: WikiPageContent;
  updatedFields: String[];
  previousValues: WikiPageContentPreviousValues;
}

export interface WikiPageContentSubscriptionPayloadPromise
  extends Promise<WikiPageContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WikiPageContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WikiPageContentPreviousValuesPromise>() => T;
}

export interface WikiPageContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WikiPageContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WikiPageContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WikiPageContentPreviousValuesSubscription>() => T;
}

export interface PersonPreviousValues {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  password: String;
  name: String;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWikiPage {
  count: Int;
}

export interface AggregateWikiPagePromise
  extends Promise<AggregateWikiPage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWikiPageSubscription
  extends Promise<AsyncIterator<AggregateWikiPage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = PersonPromise>() => T;
  content: () => Promise<String>;
  thread: <T = ThreadPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = PersonSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  thread: <T = ThreadSubscription>() => T;
}

export interface ThreadEdge {
  node: Thread;
  cursor: String;
}

export interface ThreadEdgePromise extends Promise<ThreadEdge>, Fragmentable {
  node: <T = ThreadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThreadEdgeSubscription
  extends Promise<AsyncIterator<ThreadEdge>>,
    Fragmentable {
  node: <T = ThreadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThreadPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
}

export interface ThreadPreviousValuesPromise
  extends Promise<ThreadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
}

export interface ThreadPreviousValuesSubscription
  extends Promise<AsyncIterator<ThreadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ThreadSubscriptionPayload {
  mutation: MutationType;
  node: Thread;
  updatedFields: String[];
  previousValues: ThreadPreviousValues;
}

export interface ThreadSubscriptionPayloadPromise
  extends Promise<ThreadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThreadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThreadPreviousValuesPromise>() => T;
}

export interface ThreadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThreadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThreadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThreadPreviousValuesSubscription>() => T;
}

export interface Thread {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
}

export interface ThreadPromise extends Promise<Thread>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface ThreadSubscription
  extends Promise<AsyncIterator<Thread>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface WikiPageContentEdge {
  node: WikiPageContent;
  cursor: String;
}

export interface WikiPageContentEdgePromise
  extends Promise<WikiPageContentEdge>,
    Fragmentable {
  node: <T = WikiPageContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WikiPageContentEdgeSubscription
  extends Promise<AsyncIterator<WikiPageContentEdge>>,
    Fragmentable {
  node: <T = WikiPageContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PersonEdge {
  node: Person;
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WikiPageConnection {
  pageInfo: PageInfo;
  edges: WikiPageEdge[];
}

export interface WikiPageConnectionPromise
  extends Promise<WikiPageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WikiPageEdge>>() => T;
  aggregate: <T = AggregateWikiPagePromise>() => T;
}

export interface WikiPageConnectionSubscription
  extends Promise<AsyncIterator<WikiPageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WikiPageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWikiPageSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Person",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Thread",
    embedded: false
  },
  {
    name: "WikiPage",
    embedded: false
  },
  {
    name: "WikiPageContent",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
